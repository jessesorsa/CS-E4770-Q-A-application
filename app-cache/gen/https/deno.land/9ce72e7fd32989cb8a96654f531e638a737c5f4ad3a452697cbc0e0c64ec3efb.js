import { concat } from "../../vendor/https/deno.land/std/bytes/concat.ts";
import { encoder } from "../../internal/encoding.ts";
const CRLF = encoder.encode("\r\n");
const ArrayCode = encoder.encode("*");
const BulkCode = encoder.encode("$");
const kEmptyBuffer = new Uint8Array(0);
export function encodeCommand(command, args) {
    const encodedArgsCount = encoder.encode(String(1 + args.length));
    const encodedCommand = encoder.encode(command);
    const encodedCommandLength = encoder.encode(String(encodedCommand.byteLength));
    let totalBytes = ArrayCode.byteLength + encodedArgsCount.byteLength + CRLF.byteLength + BulkCode.byteLength + encodedCommandLength.byteLength + CRLF.byteLength + encodedCommand.byteLength + CRLF.byteLength;
    const encodedArgs = Array(args.length);
    for(let i = 0; i < args.length; i++){
        const arg = args[i];
        const bytes = arg instanceof Uint8Array ? arg : arg == null ? kEmptyBuffer : encoder.encode(String(arg));
        const bytesLen = bytes.byteLength;
        totalBytes += BulkCode.byteLength + String(bytesLen).length + CRLF.byteLength + bytes.byteLength + CRLF.byteLength;
        encodedArgs[i] = bytes;
    }
    const request = new Uint8Array(totalBytes);
    let index = 0;
    index = writeFrom(request, ArrayCode, index);
    index = writeFrom(request, encodedArgsCount, index);
    index = writeFrom(request, CRLF, index);
    index = writeFrom(request, BulkCode, index);
    index = writeFrom(request, encodedCommandLength, index);
    index = writeFrom(request, CRLF, index);
    index = writeFrom(request, encodedCommand, index);
    index = writeFrom(request, CRLF, index);
    for(let i = 0; i < encodedArgs.length; i++){
        const encodedArg = encodedArgs[i];
        const encodedArgLength = encoder.encode(String(encodedArg.byteLength));
        index = writeFrom(request, BulkCode, index);
        index = writeFrom(request, encodedArgLength, index);
        index = writeFrom(request, CRLF, index);
        index = writeFrom(request, encodedArg, index);
        index = writeFrom(request, CRLF, index);
    }
    return request;
}
function writeFrom(bytes, payload, fromIndex) {
    bytes.set(payload, fromIndex);
    return fromIndex + payload.byteLength;
}
export function encodeCommands(commands) {
    // TODO: find a more optimized solution.
    const bufs = Array(commands.length);
    for(let i = 0; i < commands.length; i++){
        const { command , args  } = commands[i];
        bufs[i] = encodeCommand(command, args);
    }
    return concat(bufs);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0dHBzOi8vZGVuby5sYW5kL3gvcmVkaXNAdjAuMzIuNC9wcm90b2NvbC9zaGFyZWQvY29tbWFuZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25jYXQgfSBmcm9tIFwiLi4vLi4vdmVuZG9yL2h0dHBzL2Rlbm8ubGFuZC9zdGQvYnl0ZXMvY29uY2F0LnRzXCI7XG5pbXBvcnQgeyBlbmNvZGVyIH0gZnJvbSBcIi4uLy4uL2ludGVybmFsL2VuY29kaW5nLnRzXCI7XG5pbXBvcnQgdHlwZSB7IFJlZGlzVmFsdWUgfSBmcm9tIFwiLi90eXBlcy50c1wiO1xuaW1wb3J0IHR5cGUgeyBDb21tYW5kIH0gZnJvbSBcIi4vcHJvdG9jb2wudHNcIjtcblxuY29uc3QgQ1JMRiA9IGVuY29kZXIuZW5jb2RlKFwiXFxyXFxuXCIpO1xuY29uc3QgQXJyYXlDb2RlID0gZW5jb2Rlci5lbmNvZGUoXCIqXCIpO1xuY29uc3QgQnVsa0NvZGUgPSBlbmNvZGVyLmVuY29kZShcIiRcIik7XG5cbmNvbnN0IGtFbXB0eUJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KDApO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlQ29tbWFuZChcbiAgY29tbWFuZDogc3RyaW5nLFxuICBhcmdzOiBSZWRpc1ZhbHVlW10sXG4pOiBVaW50OEFycmF5IHtcbiAgY29uc3QgZW5jb2RlZEFyZ3NDb3VudCA9IGVuY29kZXIuZW5jb2RlKFxuICAgIFN0cmluZygxICsgYXJncy5sZW5ndGgpLFxuICApO1xuICBjb25zdCBlbmNvZGVkQ29tbWFuZCA9IGVuY29kZXIuZW5jb2RlKGNvbW1hbmQpO1xuICBjb25zdCBlbmNvZGVkQ29tbWFuZExlbmd0aCA9IGVuY29kZXIuZW5jb2RlKFxuICAgIFN0cmluZyhlbmNvZGVkQ29tbWFuZC5ieXRlTGVuZ3RoKSxcbiAgKTtcbiAgbGV0IHRvdGFsQnl0ZXMgPSBBcnJheUNvZGUuYnl0ZUxlbmd0aCArXG4gICAgZW5jb2RlZEFyZ3NDb3VudC5ieXRlTGVuZ3RoICtcbiAgICBDUkxGLmJ5dGVMZW5ndGggK1xuICAgIEJ1bGtDb2RlLmJ5dGVMZW5ndGggK1xuICAgIGVuY29kZWRDb21tYW5kTGVuZ3RoLmJ5dGVMZW5ndGggK1xuICAgIENSTEYuYnl0ZUxlbmd0aCArXG4gICAgZW5jb2RlZENvbW1hbmQuYnl0ZUxlbmd0aCArXG4gICAgQ1JMRi5ieXRlTGVuZ3RoO1xuICBjb25zdCBlbmNvZGVkQXJnczogQXJyYXk8VWludDhBcnJheT4gPSBBcnJheShhcmdzLmxlbmd0aCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGFyZyA9IGFyZ3NbaV07XG4gICAgY29uc3QgYnl0ZXMgPSBhcmcgaW5zdGFuY2VvZiBVaW50OEFycmF5XG4gICAgICA/IGFyZ1xuICAgICAgOiAoYXJnID09IG51bGwgPyBrRW1wdHlCdWZmZXIgOiBlbmNvZGVyLmVuY29kZShTdHJpbmcoYXJnKSkpO1xuICAgIGNvbnN0IGJ5dGVzTGVuID0gYnl0ZXMuYnl0ZUxlbmd0aDtcbiAgICB0b3RhbEJ5dGVzICs9IEJ1bGtDb2RlLmJ5dGVMZW5ndGggK1xuICAgICAgU3RyaW5nKGJ5dGVzTGVuKS5sZW5ndGggK1xuICAgICAgQ1JMRi5ieXRlTGVuZ3RoICtcbiAgICAgIGJ5dGVzLmJ5dGVMZW5ndGggK1xuICAgICAgQ1JMRi5ieXRlTGVuZ3RoO1xuICAgIGVuY29kZWRBcmdzW2ldID0gYnl0ZXM7XG4gIH1cblxuICBjb25zdCByZXF1ZXN0ID0gbmV3IFVpbnQ4QXJyYXkodG90YWxCeXRlcyk7XG4gIGxldCBpbmRleCA9IDA7XG4gIGluZGV4ID0gd3JpdGVGcm9tKHJlcXVlc3QsIEFycmF5Q29kZSwgaW5kZXgpO1xuICBpbmRleCA9IHdyaXRlRnJvbShyZXF1ZXN0LCBlbmNvZGVkQXJnc0NvdW50LCBpbmRleCk7XG4gIGluZGV4ID0gd3JpdGVGcm9tKHJlcXVlc3QsIENSTEYsIGluZGV4KTtcbiAgaW5kZXggPSB3cml0ZUZyb20ocmVxdWVzdCwgQnVsa0NvZGUsIGluZGV4KTtcbiAgaW5kZXggPSB3cml0ZUZyb20ocmVxdWVzdCwgZW5jb2RlZENvbW1hbmRMZW5ndGgsIGluZGV4KTtcbiAgaW5kZXggPSB3cml0ZUZyb20ocmVxdWVzdCwgQ1JMRiwgaW5kZXgpO1xuICBpbmRleCA9IHdyaXRlRnJvbShyZXF1ZXN0LCBlbmNvZGVkQ29tbWFuZCwgaW5kZXgpO1xuICBpbmRleCA9IHdyaXRlRnJvbShyZXF1ZXN0LCBDUkxGLCBpbmRleCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2RlZEFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBlbmNvZGVkQXJnID0gZW5jb2RlZEFyZ3NbaV07XG4gICAgY29uc3QgZW5jb2RlZEFyZ0xlbmd0aCA9IGVuY29kZXIuZW5jb2RlKFN0cmluZyhlbmNvZGVkQXJnLmJ5dGVMZW5ndGgpKTtcbiAgICBpbmRleCA9IHdyaXRlRnJvbShyZXF1ZXN0LCBCdWxrQ29kZSwgaW5kZXgpO1xuICAgIGluZGV4ID0gd3JpdGVGcm9tKHJlcXVlc3QsIGVuY29kZWRBcmdMZW5ndGgsIGluZGV4KTtcbiAgICBpbmRleCA9IHdyaXRlRnJvbShyZXF1ZXN0LCBDUkxGLCBpbmRleCk7XG4gICAgaW5kZXggPSB3cml0ZUZyb20ocmVxdWVzdCwgZW5jb2RlZEFyZywgaW5kZXgpO1xuICAgIGluZGV4ID0gd3JpdGVGcm9tKHJlcXVlc3QsIENSTEYsIGluZGV4KTtcbiAgfVxuXG4gIHJldHVybiByZXF1ZXN0O1xufVxuXG5mdW5jdGlvbiB3cml0ZUZyb20oXG4gIGJ5dGVzOiBVaW50OEFycmF5LFxuICBwYXlsb2FkOiBVaW50OEFycmF5LFxuICBmcm9tSW5kZXg6IG51bWJlcixcbik6IG51bWJlciB7XG4gIGJ5dGVzLnNldChwYXlsb2FkLCBmcm9tSW5kZXgpO1xuICByZXR1cm4gZnJvbUluZGV4ICsgcGF5bG9hZC5ieXRlTGVuZ3RoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlQ29tbWFuZHMoY29tbWFuZHM6IEFycmF5PENvbW1hbmQ+KTogVWludDhBcnJheSB7XG4gIC8vIFRPRE86IGZpbmQgYSBtb3JlIG9wdGltaXplZCBzb2x1dGlvbi5cbiAgY29uc3QgYnVmczogQXJyYXk8VWludDhBcnJheT4gPSBBcnJheShjb21tYW5kcy5sZW5ndGgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbW1hbmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgeyBjb21tYW5kLCBhcmdzIH0gPSBjb21tYW5kc1tpXTtcbiAgICBidWZzW2ldID0gZW5jb2RlQ29tbWFuZChjb21tYW5kLCBhcmdzKTtcbiAgfVxuICByZXR1cm4gY29uY2F0KGJ1ZnMpO1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFNBQVMsTUFBTSxRQUFRLG1EQUFtRDtBQUMxRSxTQUFTLE9BQU8sUUFBUSw2QkFBNkI7QUFJckQsTUFBTSxPQUFPLFFBQVEsTUFBTSxDQUFDO0FBQzVCLE1BQU0sWUFBWSxRQUFRLE1BQU0sQ0FBQztBQUNqQyxNQUFNLFdBQVcsUUFBUSxNQUFNLENBQUM7QUFFaEMsTUFBTSxlQUFlLElBQUksV0FBVztBQUVwQyxPQUFPLFNBQVMsY0FDZCxPQUFlLEVBQ2YsSUFBa0IsRUFDTjtJQUNaLE1BQU0sbUJBQW1CLFFBQVEsTUFBTSxDQUNyQyxPQUFPLElBQUksS0FBSyxNQUFNO0lBRXhCLE1BQU0saUJBQWlCLFFBQVEsTUFBTSxDQUFDO0lBQ3RDLE1BQU0sdUJBQXVCLFFBQVEsTUFBTSxDQUN6QyxPQUFPLGVBQWUsVUFBVTtJQUVsQyxJQUFJLGFBQWEsVUFBVSxVQUFVLEdBQ25DLGlCQUFpQixVQUFVLEdBQzNCLEtBQUssVUFBVSxHQUNmLFNBQVMsVUFBVSxHQUNuQixxQkFBcUIsVUFBVSxHQUMvQixLQUFLLFVBQVUsR0FDZixlQUFlLFVBQVUsR0FDekIsS0FBSyxVQUFVO0lBQ2pCLE1BQU0sY0FBaUMsTUFBTSxLQUFLLE1BQU07SUFDeEQsSUFBSyxJQUFJLElBQUksR0FBRyxJQUFJLEtBQUssTUFBTSxFQUFFLElBQUs7UUFDcEMsTUFBTSxNQUFNLElBQUksQ0FBQyxFQUFFO1FBQ25CLE1BQU0sUUFBUSxlQUFlLGFBQ3pCLE1BQ0MsT0FBTyxJQUFJLEdBQUcsZUFBZSxRQUFRLE1BQU0sQ0FBQyxPQUFPLEtBQUssQUFBQztRQUM5RCxNQUFNLFdBQVcsTUFBTSxVQUFVO1FBQ2pDLGNBQWMsU0FBUyxVQUFVLEdBQy9CLE9BQU8sVUFBVSxNQUFNLEdBQ3ZCLEtBQUssVUFBVSxHQUNmLE1BQU0sVUFBVSxHQUNoQixLQUFLLFVBQVU7UUFDakIsV0FBVyxDQUFDLEVBQUUsR0FBRztJQUNuQjtJQUVBLE1BQU0sVUFBVSxJQUFJLFdBQVc7SUFDL0IsSUFBSSxRQUFRO0lBQ1osUUFBUSxVQUFVLFNBQVMsV0FBVztJQUN0QyxRQUFRLFVBQVUsU0FBUyxrQkFBa0I7SUFDN0MsUUFBUSxVQUFVLFNBQVMsTUFBTTtJQUNqQyxRQUFRLFVBQVUsU0FBUyxVQUFVO0lBQ3JDLFFBQVEsVUFBVSxTQUFTLHNCQUFzQjtJQUNqRCxRQUFRLFVBQVUsU0FBUyxNQUFNO0lBQ2pDLFFBQVEsVUFBVSxTQUFTLGdCQUFnQjtJQUMzQyxRQUFRLFVBQVUsU0FBUyxNQUFNO0lBQ2pDLElBQUssSUFBSSxJQUFJLEdBQUcsSUFBSSxZQUFZLE1BQU0sRUFBRSxJQUFLO1FBQzNDLE1BQU0sYUFBYSxXQUFXLENBQUMsRUFBRTtRQUNqQyxNQUFNLG1CQUFtQixRQUFRLE1BQU0sQ0FBQyxPQUFPLFdBQVcsVUFBVTtRQUNwRSxRQUFRLFVBQVUsU0FBUyxVQUFVO1FBQ3JDLFFBQVEsVUFBVSxTQUFTLGtCQUFrQjtRQUM3QyxRQUFRLFVBQVUsU0FBUyxNQUFNO1FBQ2pDLFFBQVEsVUFBVSxTQUFTLFlBQVk7UUFDdkMsUUFBUSxVQUFVLFNBQVMsTUFBTTtJQUNuQztJQUVBLE9BQU87QUFDVCxDQUFDO0FBRUQsU0FBUyxVQUNQLEtBQWlCLEVBQ2pCLE9BQW1CLEVBQ25CLFNBQWlCLEVBQ1Q7SUFDUixNQUFNLEdBQUcsQ0FBQyxTQUFTO0lBQ25CLE9BQU8sWUFBWSxRQUFRLFVBQVU7QUFDdkM7QUFFQSxPQUFPLFNBQVMsZUFBZSxRQUF3QixFQUFjO0lBQ25FLHdDQUF3QztJQUN4QyxNQUFNLE9BQTBCLE1BQU0sU0FBUyxNQUFNO0lBQ3JELElBQUssSUFBSSxJQUFJLEdBQUcsSUFBSSxTQUFTLE1BQU0sRUFBRSxJQUFLO1FBQ3hDLE1BQU0sRUFBRSxRQUFPLEVBQUUsS0FBSSxFQUFFLEdBQUcsUUFBUSxDQUFDLEVBQUU7UUFDckMsSUFBSSxDQUFDLEVBQUUsR0FBRyxjQUFjLFNBQVM7SUFDbkM7SUFDQSxPQUFPLE9BQU87QUFDaEIsQ0FBQyJ9